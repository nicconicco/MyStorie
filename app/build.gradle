apply plugin: 'com.android.application'

// SONAR CONFIG
apply plugin: 'org.sonarqube'

// JACOCO CONFIG
apply plugin: 'jacoco'

// FindBugs
apply plugin: 'findbugs'

// Checkstyle config
apply plugin: 'checkstyle'

// PMD CONFIG
apply plugin: 'pmd'

task checkstyle(type: Checkstyle) {
    configFile file("$project.rootDir/config/checkstyle/checkstyle.xml")
    source 'src'
    include '**/*.java'
    classpath = files()
}

task findbugs(type: FindBugs) {
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'high'
    excludeFilter = new File("${project.rootDir}/config/findbugs-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
        xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
    }

    classpath = files()
}

task pmd(type: Pmd) {
    description 'Identifying potential problems mainly dead code, duplicated code, cyclomatic complexity and overcomplicated expressions'
    group 'verification'
    ruleSetFiles = files("$project.rootDir/config/pmd-ruleset.xml")
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        html.destination = "$project.buildDir/outputs/pmd/pmd.html"
    }
}
check.dependsOn 'checkstyle', 'findbugs', 'pmd'


android {

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    // Padrao mvvm
    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Manter isto no top, senão ele não consegue enxergar
    signingConfigs {
        theReleaseKey {
            storeFile file('/Users/scopus/Documents/MyStorie/mykeystore.jks')
            storePassword "123456"
            keyAlias "MYSTORIE"
            keyPassword "123456"
        }
    }

    compileSdkVersion 26
    defaultConfig {
        multiDexEnabled true
        buildToolsVersion "27.0.1"
        applicationId "com.cgalves.mystorie"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["resourcePackageName": android.defaultConfig.applicationId]
            }
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".release"
            signingConfig signingConfigs.theReleaseKey

            // Config sonarqube
            testCoverageEnabled true
        }
//        jnidebug {
//            initWith debug
//            jniDebuggable true
//            applicationIdSuffix ".jidebug"
//        }
    }

    sourceSets {
        mock {
            java.srcDirs('src/mock/java', 'src/main/java')
        }
        production {
            java.srcDirs('src/production/java', 'src/main/java')
        }
    }

    sourceSets.main {
        jni.srcDirs = ['src/main/jni']
        jniLibs.srcDir 'src/main/libs'
    }

    flavorDimensions "all"
    productFlavors {
        mock {
            applicationId "com.cgalves.mystorie.mvpf"
        }

        production {
            applicationId "com.cgalves.mystorie.mvpe"
        }

//        javaMVP_API {
//            applicationId "com.cgalves.mystorie.mvpa"
//        }

//        javaMVVM_FASTMOCK {
//            applicationId "com.cgalves.mystorie.mvvm"
//        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

// AA config
apply plugin: 'com.android.application'
def androidAnnotationsVersion = "4.4.0"

dependencies {
    annotationProcessor "org.androidannotations:androidannotations:$androidAnnotationsVersion"
    implementation "org.androidannotations:androidannotations-api:$androidAnnotationsVersion"
}

dependencies {
    implementation supportDependencies.appCompat
    implementation supportDependencies.design
    implementation supportDependencies.recyclerView
    implementation supportDependencies.cardView
    implementation retrofitDependencies.retrofit
    implementation retrofitDependencies.gson
    implementation retrofitDependencies.rxAdapterJava
    implementation rxDependencies.rxAndroid
    implementation rxDependencies.rxJava
    implementation circleImageView
    implementation glide
    testImplementation testingDependencies.junit
    testImplementation testingDependencies.mockito
    api busEvent
    api parseServer
    implementation okhttp.okhttpInterceptor
//    implementation facebook

//    compile 'com.parse:parsefacebookutils-v4-android:1.10.4@aar'
//    compile 'com.facebook.android:facebook-android-sdk:4.29.0'

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(include: 'Parse-*.jar', dir: 'libs')
    compile fileTree(include: 'ParseFacebookUtilsV4-*.jar', dir: 'libs')
    implementation 'com.google.android.gms:play-services-maps:11.8.0'
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:1.10.19'

    // Android MVVM architecture
    implementation "android.arch.lifecycle:extensions:1.1.1"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"

    //roboeletric
    testImplementation "org.robolectric:robolectric:3.8"
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("$project.buildDir/outputs/jacoco")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

def getVersionCodeTimetamp() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH:mm:ss').replace("-","/")
    def code = formattedDate.toString()
    return "vScopus-"+code
}

sonarqube {
    properties {
        property  'sonar.projectKey' , 'outropb'
        property 'sonar.projectName', 'TesteMyStorie-outropb'
        property 'sonar.host.url', '172.16.211.28:9001'
//        property 'sonar.jdbc.url', 'jdbc:mysql://sonarqube-db:3306/sonar?useUnicode=true&amp;characterEncoding=utf8'
//        property 'sonar.jdbc.driverClassName', 'com.mysql.jdbc.Driver'
//        property 'sonar.jdbc.username', 'sonar'
//        property 'sonar.jdbc.password', 'sonar'
//        property 'sonar.sourceEncoding', 'UTF-8'
//        property 'sonar.projectVersion', getVersionCodeTimestamp().toString()
        property 'sonar.login', 'admin'
        property 'sonar.password', 'admin'
        property 'sonar.binaries', '**/target/classes '

        property 'sonar.profile', 'Android Lint'
        property "sonar.sources", "./src/main/java"

        property 'sonar.import_unknown_files', true
        property 'sonar.android.lint.report', 'build/outputs/lint-results.xml'
    }
}