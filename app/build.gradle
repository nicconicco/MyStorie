apply plugin: 'com.android.application'
// SONAR CONFIG
apply plugin: 'org.sonarqube'

// JACOCO CONFIG
apply plugin: 'jacoco'

// FindBugs
apply plugin: 'findbugs'

// Checkstyle config
apply plugin: 'checkstyle'

// PMD CONFIG
apply plugin: 'pmd'

task checkstyle(type: Checkstyle) {
    configFile file("$project.rootDir/config/checkstyle/checkstyle.xml")
    source 'src'
    include '**/*.java'
    classpath = files()
}

task findbugs(type: FindBugs) {
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'high'
    excludeFilter = new File("${project.rootDir}/config/findbugs-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
        xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
    }

    classpath = files()
}

task pmd(type: Pmd) {
    description 'Identifying potential problems mainly dead code, duplicated code, cyclomatic complexity and overcomplicated expressions'
    group 'verification'
    ruleSetFiles = files("$project.rootDir/config/pmd-ruleset.xml")
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        html.destination = "$project.buildDir/outputs/pmd/pmd.html"
    }
}
check.dependsOn 'checkstyle', 'findbugs', 'pmd'

android {

    splits{
        abi {
            enable true
            reset()
            include 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'
            universalApk false
        }
    }
    project.ext.versionCodes = ['armeabi-v7a': 2, 'arm64-v8a': 3, 'x86': 8, 'x86_64': 9]
    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1000000 + android.defaultConfig.versionCode
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    // Padrao mvvm
    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Manter isto no top, senão ele não consegue enxergar
    signingConfigs {
        theReleaseKey {
            storeFile file('/Users/scopus/Documents/MyStorie/mykeystore.jks')
            storePassword "123456"
            keyAlias "MYSTORIE"
            keyPassword "123456"
        }
    }

    compileSdkVersion 28
    defaultConfig {
        multiDexEnabled true
        buildToolsVersion "28.0.0"
        applicationId "com.cgalves.mystorie"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["resourcePackageName": android.defaultConfig.applicationId]
                includeCompileClasspath false
            }
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".release"
            signingConfig signingConfigs.theReleaseKey

            // Config sonarqube
            testCoverageEnabled true
        }
//        jnidebug {
//            initWith debug
//            jniDebuggable true
//            applicationIdSuffix ".jidebug"
//        }
    }

    sourceSets {
        mock {
            java.srcDirs('src/mock/java', 'src/main/java')
        }
        production {
            java.srcDirs('src/production/java', 'src/main/java')
        }
    }

    sourceSets.main {
        jni.srcDirs = ['src/main/jni']
        jniLibs.srcDir 'src/main/libs'
    }

    flavorDimensions "all"
    productFlavors {
        mock {
            applicationId "com.cgalves.mystorie.mvpf"
        }

        production {
            applicationId "com.cgalves.mystorie.mvpe"
        }
    }

    variantFilter { variant ->
        def api = variant.getFlavors().get(0).name
        def isDebug = variant.buildType.name == 'debug'

        if (!isDebug) {
            if (api == 'mock') {
                variant.setIgnore(true)
            }
        } else if(api == 'production') {
            variant.setIgnore(true)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion = '28.0.3'
}

// AA config
apply plugin: 'com.android.application'
def androidAnnotationsVersion = "4.5.2"

dependencies {
    annotationProcessor "org.androidannotations:androidannotations:$androidAnnotationsVersion"
    implementation "org.androidannotations:androidannotations-api:$androidAnnotationsVersion"
}

def retrofitVersion = '2.3.0'

dependencies {

    //Support
    api 'androidx.multidex:multidex:2.0.1'
    api 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    api "androidx.appcompat:appcompat:1.0.2"
    api "androidx.cardview:cardview:1.0.0"
    api "androidx.recyclerview:recyclerview:1.0.0"
    api "androidx.core:core:1.0.1"
    api "androidx.legacy:legacy-support-v4:1.0.0"
    api "androidx.legacy:legacy-support-v13:1.0.0"
    api "androidx.legacy:legacy-support-core-utils:1.0.0"
    api "androidx.leanback:leanback:1.0.0"
    api "com.google.android.material:material:1.0.0"

    //API
    api "io.reactivex:rxandroid:1.1.0"
    api "io.reactivex:rxjava:1.3.0"
    api "com.squareup.retrofit2:retrofit:$retrofitVersion"
    api "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    api "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    api "com.google.code.gson:gson:2.8.5"

    api "de.hdodenhof:circleimageview:1.3.0"

    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

    implementation 'org.greenrobot:eventbus:3.1.1'

//    api parseServer

    implementation 'com.parse:parse-android:1.16.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    api "com.google.guava:guava:24.1-jre"
//    implementation facebook

//    compile 'com.parse:parsefacebookutils-v4-android:1.10.4@aar'
//    compile 'com.facebook.android:facebook-android-sdk:4.29.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(include: 'Parse-*.jar', dir: 'libs')
//    implementation fileTree(include: 'ParseFacebookUtilsV4-*.jar', dir: 'libs')
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:2.19.0'

    // Android MVVM architecture
    implementation "android.arch.lifecycle:extensions:1.1.1"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"

    //roboeletric
    testImplementation "org.robolectric:robolectric:3.8"

    // android annotations processor
//    implementation files('libs/processor.jar')

    //annotation processing
//    implementation project(':binder')
//    annotationProcessor project(':binder-compiler')
}



// Task para o processor - inicio
//task processorTask(type: Exec) {
//    commandLine 'cp', '../processor/build/libs/processor.jar', 'libs/'
//}
//
//processorTask.dependsOn(':processor:build')
//preBuild.dependsOn(processorTask)
// Task para o processor - Fim

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("$project.buildDir/outputs/jacoco")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

def getVersionCodeTimetamp() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH:mm:ss').replace("-", "/")
    def code = formattedDate.toString()
    return "vScopus-" + code
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'outropb'
        property 'sonar.projectName', 'TesteMyStorie-outropb'
        property 'sonar.host.url', '172.16.211.28:9001'
//        property 'sonar.jdbc.url', 'jdbc:mysql://sonarqube-db:3306/sonar?useUnicode=true&amp;characterEncoding=utf8'
//        property 'sonar.jdbc.driverClassName', 'com.mysql.jdbc.Driver'
//        property 'sonar.jdbc.username', 'sonar'
//        property 'sonar.jdbc.password', 'sonar'
//        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.projectVersion', "pb520-"+getVersionCodeTimestamp().toString()
        property 'sonar.login', 'admin'
        property 'sonar.password', 'admin'
        property 'sonar.binaries', '**/target/classes '

        property 'sonar.profile', 'Android Lint'
        property "sonar.sources", "./src/main/java"

        property 'sonar.import_unknown_files', true
        property 'sonar.android.lint.report', 'build/outputs/lint-results.xml'
    }
}


